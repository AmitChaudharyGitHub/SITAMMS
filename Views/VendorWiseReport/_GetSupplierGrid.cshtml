
<style>
    .gridTable {
        margin: 5px;
        padding: 10px;
        border: 1px #c8c8c8 solid;
        border-collapse: collapse;
        min-width: 550px;
        background-color: #fff;
        color: #fff;
        width: 100%;
    }

    .gridHead th {
        font-weight: bold;
        background-color: #5c93f0;
        color: #fff;
        padding: 10px;
        text-align: center;
    }

    .gridHead a:link, .gridHead a:visited, .gridHead a:active, .gridHead a:hover {
        color: #fff;
    }

    .gridHead a:hover {
        text-decoration: underline;
    }

    .gridTable tr.gridAltRow {
        background-color: #efeeef;
    }

    .gridTable tr:hover {
        background-color: #7da3f2;
    }

    .gridTable tr :hover {
        color: white;
    }

    .gridAltRow td {
        padding: 10px 4px;
        margin: 5px;
        color: #333;
        font-size: 12px;
    }

    .gridRow td {
        padding: 10px 4px;
        color: #333;
        font-size: 12px;
    }

    .gridFooter td {
        padding: 10px;
        color: #ffffff;
        font-size: 12pt;
        text-align: center;
        background-color: #5c93f0;
    }

    .gridFooter a {
        text-decoration: none;
        padding: 6px 11px;
        margin-right: 6px;
        border-radius: 3px;
        color: #fff;
        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.5);
        border: 1px solid #43505e;
        background: #556270;
        background: -moz-linear-gradient(top, #556270 0%, #444d57 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#556270), color-stop(100%,#444d57));
        background: -webkit-linear-gradient(top, #556270 0%,#444d57 100%);
        background: -o-linear-gradient(top, #556270 0%,#444d57 100%);
        background: -ms-linear-gradient(top, #556270 0%,#444d57 100%);
        background: linear-gradient(to bottom, #556270 0%,#444d57 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#556270', endColorstr='#444d57',GradientType=0 );
        -moz-box-shadow: inset 0 3px 0px -2px rgba(255, 255, 255, .3);
        -webkit-box-shadow: inset 0 3px 0px -2px rgba(255, 255, 255, .3);
        box-shadow: inset 0 3px 0px -2px rgba(255, 255, 255, .3);
    }

    .my-classR {
        text-align: right;
    }

    .my-classL {
        text-align: left;
    }

    .my-classC {
        text-align: center;
    }
</style>




<div id="gridposition" style="width: 100%; overflow:scroll">
    @if (Model.Count > 0)
    {
        var grid1 = new WebGrid(source: Model, canPage: true, rowsPerPage: 10, ajaxUpdateContainerId: "positionGrid");

        @grid1.GetHtml(mode: WebGridPagerModes.All,
                      tableStyle: "gridTable",
                      headerStyle: "gridHead",
                      footerStyle: "gridFooter",
                      rowStyle: "gridRow",
                      alternatingRowStyle: "gridAltRow",
                      htmlAttributes: new { id = "positionGrid" },
                      fillEmptyRows: false,
                      columns: grid1.Columns(
                          grid1.Column(header: "S.No", format: @<text><div style="text-align:center;">@(item.WebGrid.Rows.IndexOf(item) + 1)</div></text> , style: "my-classC"),
                        grid1.Column("PONo", header: "PO No ", style: "my-classL"),
                        grid1.Column("PODate", header: "PO date", format: (item) => string.Format("{0:dd-MMM-yyyy}", item.PODate)),
                       grid1.Column("GRNNO", header: "GRN No.", style: "my-classC"),
                       grid1.Column("MRNNo", header: "DMR/ MRN No", style: "my-classL"),
                       grid1.Column("ChalanNo", header: "Inv/Bill/ Ch. No.", style: "my-classL"),
                       grid1.Column("Chalandate", header: "Inv/Bill/ Ch. Date", style: "my-classL", format: (item) => string.Format("{0:dd-MMM-yyyy}", item.Chalandate)),
                       grid1.Column("VehicleNo", header: "Vehicle No.", style: "my-classL"),
                       grid1.Column("ItemNo", header: "Item Code", style: "my-classC"),
                       grid1.Column("ItemDescription", header: "Item Description", style: "my-classL"),
                        grid1.Column("UnitCode", header: "Unit", style: "my-classL"),
                         grid1.Column("Qty", header: "Qty.", format: (item) => string.Format("{0:0.00}", item.Qty), style: "my-classR"),
                          grid1.Column("Rate", header: "Net Rate (After Disc.)", format: (item) => string.Format("{0:0.00}", item.Rate), style: "my-classR"),
                           grid1.Column("DiscountedAmt", header: "Discounted Amount", format: (item) => string.Format("{0:0.00}", item.DiscountedAmt), style: "my-classR"),
                            grid1.Column("PandFAmt", header: "P&F Amount", format: (item) => string.Format("{0:0.00}", item.PandFAmt), style: "my-classR"),
                             grid1.Column("CartageAmt", header: "Cartage  (Amt.)", format: (item) => string.Format("{0:0.00}", item.CartageAmt), style: "my-classR"),
                             grid1.Column("InsuranceAmt", header: "Insurance Amt.", format: (item) => string.Format("{0:0.00}", item.InsuranceAmt), style: "my-classR"),
                            grid1.Column("GSTType", header: "GST(%)", style: "my-classL"),
                          grid1.Column("GSTAmt", header: "GST Amt.", format: (item) => string.Format("{0:0.00}", item.GSTAmt), style: "my-classR"),
                      //grid1.Column("ReceiveAmt", header: "Other if Any (Am.t).", format: (item) => string.Format("{0:0.00}", item.ReceiveAmt), style: "my-classR"),
                      grid1.Column("GrossAmt", header: " Total Amt.", format: (item) => string.Format("{0:0.00}", item.GrossAmt), style: "my-classR")
                       ))
    }
        else
        {
        <p style="color:red; font-size:large">No records found !!!!</p>
    }


</div>